// Code generated by github.com/viocle/dataloaden, DO NOT EDIT.

package example

import (
	"sync"
	"time"
)

// UserLoaderConfig captures the config to create a new UserLoader
type UserLoaderConfig struct {
	// Fetch is a method that provides the data for the loader
	Fetch func(keys []string) ([]*User, []error)

	// Wait is how long to wait before sending a batch
	Wait time.Duration

	// MaxBatch will limit the maximum number of keys to send in one batch, 0 = no limit
	MaxBatch int

	// ExpireAfter determines how long until cached items expire. Set to 0 to disable expiration
	ExpireAfter time.Duration

	// HookBeforeFetch is called right before a fetch is performed
	HookBeforeFetch func(keys []string, loaderName string)

	// HookAfterFetch is called right after a fetch is performed
	HookAfterFetch func(keys []string, loaderName string)

	// HookAfterSet is called after a value is set in the cache
	HookAfterSet func(key string, value *User)

	// HookAfterClear is called after a value is cleared from the cache
	HookAfterClear func(key string)

	// HookAfterClearAll is called after all values are cleared from the cache
	HookAfterClearAll func()

	// HookAfterExpired is called after a value is cleared in the cache due to expiration
	HookAfterExpired func(key string)
}

// UserLoaderCacheItem defines a cache item when using dataloader cache expiration where expireAfter > 0
type UserLoaderCacheItem struct {
	// Expires contains the time this CacheItem expires
	Expires int64

	// Value contains the cached *User
	Value *User
}

// expired returns true if the cache item has expired
func (c *UserLoaderCacheItem) expired(now int64) bool {
	return c.Expires < now
}

// NewUserLoader creates a new UserLoader given a fetch, wait, and maxBatch
func NewUserLoader(config UserLoaderConfig) *UserLoader {
	l := &UserLoader{
		fetch:    config.Fetch,
		wait:     config.Wait,
		maxBatch: config.MaxBatch,

		expireAfter: config.ExpireAfter.Nanoseconds(),

		hookBeforeFetch:   config.HookBeforeFetch,
		hookAfterFetch:    config.HookAfterFetch,
		hookAfterSet:      config.HookAfterSet,
		hookAfterClear:    config.HookAfterClear,
		hookAfterClearAll: config.HookAfterClearAll,
		hookAfterExpired:  config.HookAfterExpired,
	}
	l.batchPool = sync.Pool{
		New: func() interface{} {
			return l.createNewBatch()
		},
	}
	l.unsafeBatchSet()
	return l
}

// UserLoader batches and caches requests
type UserLoader struct {
	// this method provides the data for the loader
	fetch func(keys []string) ([]*User, []error)

	// lazily created cache

	cacheExpire map[string]*UserLoaderCacheItem

	cache map[string]*User

	// the current batch. keys will continue to be collected until timeout is hit,
	// then everything will be sent to the fetch method and out to the listeners
	batch *userLoaderBatch

	// how long to done before sending a batch
	wait time.Duration

	// this will limit the maximum number of keys to send in one batch, 0 = no limit
	maxBatch int

	// the amount of nanoseconds a cache item should remain valid. This will determine if cache expiration will be used, 0 = no expiration
	expireAfter int64

	// mutex to prevent races
	mu sync.Mutex

	// HookBeforeFetch is called right before a fetch is performed
	hookBeforeFetch func(keys []string, loaderName string)

	// HookAfterFetch is called right after a fetch is performed
	hookAfterFetch func(keys []string, loaderName string)

	// HookAfterSet is called after a value is primed in the cache
	hookAfterSet func(key string, value *User)

	// HookAfterClear is called after a value is cleared from the cache
	hookAfterClear func(key string)

	// HookAfterClearAll is called after all values are cleared from the cache
	hookAfterClearAll func()

	// HookAfterExpired is called after a value is cleared in the cache due to expiration
	hookAfterExpired func(key string)

	// pool of batches
	batchPool sync.Pool
}

type userLoaderBatch struct {
	now     int64
	done    chan struct{}
	keysMap map[string]int
	keys    []string
	data    []*User
	errors  []error
	closing bool
}

// Load a User by key, batching and caching will be applied automatically
func (l *UserLoader) Load(key string) (*User, error) {
	v, f := l.LoadThunk(key)
	if f != nil {
		return f()
	}
	return v, nil
}

// unsafeBatchSet creates a new batch if one does not exist, otherwise it will reuse the existing batch
func (l *UserLoader) unsafeBatchSet() {
	if l.batch == nil {
		b := l.batchPool.Get().(*userLoaderBatch)
		// reset
		clear(b.keysMap)
		clear(b.keys)
		l.batch = &userLoaderBatch{now: 0, done: make(chan struct{}), keysMap: b.keysMap, keys: b.keys[:0], data: nil, errors: nil}
	} else if l.batch.now == 0 {
		// have a batch but first use, set the start time
		l.batch.now = time.Now().UnixNano()
	}
}

// createNewBatch creates a new batch
func (l *UserLoader) createNewBatch() *userLoaderBatch {
	return &userLoaderBatch{now: 0, done: make(chan struct{}), keysMap: make(map[string]int, l.maxBatch), keys: make([]string, 0, l.maxBatch), data: nil, errors: nil}
}

// LoadThunk returns a function that when called will block waiting for a User.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *UserLoader) LoadThunk(key string) (*User, func() (*User, error)) {
	l.mu.Lock()

	if l.expireAfter <= 0 && len(l.cache) > 0 {
		// not using cache expiration
		if it, ok := l.cache[key]; ok {
			l.mu.Unlock()
			return it, nil
		}
		l.unsafeBatchSet()
	} else if l.expireAfter > 0 && len(l.cacheExpire) > 0 {
		// using cache expiration
		l.unsafeBatchSet()
		if it, ok := l.cacheExpire[key]; ok {
			if it != nil && !it.expired(l.batch.now) {
				l.mu.Unlock()
				return it.Value, nil
			}
			// cache item has expired, clear from cache
			delete(l.cacheExpire, key)
			if l.hookAfterExpired != nil {
				l.hookAfterExpired(key)
			}
		}
	} else {
		// no cache
		l.unsafeBatchSet()
	}

	batch := l.batch
	pos := batch.keyIndex(l, key)
	l.mu.Unlock()

	return nil, func() (*User, error) {
		<-batch.done

		var data *User
		if pos < len(batch.data) {
			data = batch.data[pos]
		}

		var err error
		// its convenient to be able to return a single error for everything
		if len(batch.errors) == 1 {
			err = batch.errors[0]
		} else if batch.errors != nil {
			err = batch.errors[pos]
		}

		if err == nil {
			l.mu.Lock()
			l.unsafeSet(key, data)
			l.mu.Unlock()
		}

		return data, err
	}
}

// LoadAll fetches many keys at once. It will be broken into appropriate sized
// sub batches depending on how the loader is configured
func (l *UserLoader) LoadAll(keys []string) ([]*User, []error) {
	users := make([]*User, len(keys))
	thunks := make(map[int]func() (*User, error), len(keys))
	errors := make([]error, len(keys))

	for i, key := range keys {
		if v, thunk := l.LoadThunk(key); thunk != nil {
			thunks[i] = thunk
		} else {
			users[i] = v
		}
	}
	for i, thunk := range thunks {
		users[i], errors[i] = thunk()
	}

	return users, errors
}

// LoadAllThunk returns a function that when called will block waiting for a Users.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *UserLoader) LoadAllThunk(keys []string) func() ([]*User, []error) {
	thunks := make(map[int]func() (*User, error), len(keys))
	users := make([]*User, len(keys))
	for i, key := range keys {
		if v, thunk := l.LoadThunk(key); thunk != nil {
			thunks[i] = thunk
		} else {
			users[i] = v
		}
	}
	return func() ([]*User, []error) {
		errors := make([]error, len(keys))
		for i, thunk := range thunks {
			users[i], errors[i] = thunk()
		}
		return users, errors
	}
}

// unsafePrime will prime the cache with the given key and value if the key does not exist. This method is not thread safe.
func (l *UserLoader) unsafePrime(key string, value *User, forceReplace bool) bool {
	var found bool

	if l.expireAfter <= 0 {
		// not using cache expiration

		if _, found = l.cache[key]; found && forceReplace {
			delete(l.cache, key)
		}
		if !found || forceReplace {
			// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
			// and end up with the whole cache pointing to the same value.
			cpy := *value
			l.unsafeSet(key, &cpy)
		}

	} else {
		// using cache expiration
		if _, found = l.cacheExpire[key]; found && forceReplace {
			delete(l.cacheExpire, key)
		}
		if !found || forceReplace {
			// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
			// and end up with the whole cache pointing to the same value.
			cpy := *value
			l.unsafeSet(key, &cpy)
		}
	}

	return !found || forceReplace
}

// PrimeMany will prime the cache with the given keys and values. Value index is matched to key index.
func (l *UserLoader) PrimeMany(keys []string, values []*User) []bool {
	if len(keys) != len(values) {
		// keys and values must be the same length
		return make([]bool, len(keys))
	}
	ret := make([]bool, len(keys))
	l.mu.Lock()
	for i, key := range keys {
		ret[i] = l.unsafePrime(key, values[i], false)
	}
	l.mu.Unlock()
	return ret
}

// Prime the cache with the provided key and value. If the key already exists, no change is made
// and false is returned.
// (To forcefully prime the cache, clear the key first with loader.clear(key).prime(key, value).)
func (l *UserLoader) Prime(key string, value *User) bool {
	l.mu.Lock()
	found := l.unsafePrime(key, value, false)
	l.mu.Unlock()
	return found
}

// ForcePrime the cache with the provided key and value. If the key already exists, value is replaced
// (This removes the requirement to clear the key first with loader.clear(key).prime(key, value))
func (l *UserLoader) ForcePrime(key string, value *User) {
	l.mu.Lock()
	l.unsafePrime(key, value, true)
	l.mu.Unlock()
}

// Clear the value at key from the cache, if it exists
func (l *UserLoader) Clear(key string) {

	if l.expireAfter <= 0 {
		// not using cache expiration

		l.mu.Lock()
		delete(l.cache, key)
		l.mu.Unlock()

	} else {
		// using cache expiration
		l.mu.Lock()
		delete(l.cacheExpire, key)
		l.mu.Unlock()
	}

	if l.hookAfterClear != nil {
		l.hookAfterClear(key)
	}
}

// ClearAll clears all values from the cache
func (l *UserLoader) ClearAll() {

	if l.expireAfter <= 0 {
		// not using cache expiration

		l.mu.Lock()
		l.cache = make(map[string]*User, l.maxBatch)
		l.mu.Unlock()

	} else {
		// using cache expiration
		l.mu.Lock()
		l.cacheExpire = make(map[string]*UserLoaderCacheItem, l.maxBatch)
		l.mu.Unlock()
	}

	if l.hookAfterClearAll != nil {
		l.hookAfterClearAll()
	}
}

// ClearExpired clears all expired values from the cache if cache expiration is being used
func (l *UserLoader) ClearExpired() {
	if l.expireAfter > 0 {
		// using cache expiration
		tNow := time.Now().UnixNano()
		l.mu.Lock()
		for cacheKey, cacheItem := range l.cacheExpire {
			if cacheItem != nil && tNow > cacheItem.Expires {
				// value has expired
				delete(l.cacheExpire, cacheKey)
				if l.hookAfterExpired != nil {
					l.hookAfterExpired(cacheKey)
				}
			}
		}
		l.mu.Unlock()
	}
}

// unsafeSet will set the key to value without any locks or checks. This method is not thread safe.
func (l *UserLoader) unsafeSet(key string, value *User) {

	if l.expireAfter <= 0 {
		// not using cache expiration

		if l.cache == nil {
			l.cache = make(map[string]*User, l.maxBatch)
		}
		l.cache[key] = value

	} else {
		// using cache expiration
		if l.cacheExpire == nil {
			l.cacheExpire = make(map[string]*UserLoaderCacheItem, l.maxBatch)
		}
		l.cacheExpire[key] = &UserLoaderCacheItem{Expires: time.Now().UnixNano() + l.expireAfter, Value: value}
	}

	if l.hookAfterSet != nil {
		l.hookAfterSet(key, value)
	}
}

// keyIndex will return the location of the key in the batch, if its not found
// it will add the key to the batch
func (b *userLoaderBatch) keyIndex(l *UserLoader, key string) int {
	if i, ok := b.keysMap[key]; ok {
		return i
	}

	pos := len(b.keysMap)
	b.keysMap[key] = pos
	b.keys = append(b.keys, key)
	if pos == 0 {
		go b.startTimer(l)
	}

	if l.maxBatch != 0 && pos >= l.maxBatch-1 {
		if !b.closing {
			b.closing = true
			l.batch = nil
			go b.end(l)
		}
	}

	return pos
}

// startTimer will wait the desired wait time before sending the batch unless another batch limit had been reached
func (b *userLoaderBatch) startTimer(l *UserLoader) {
	time.Sleep(l.wait)
	l.mu.Lock()

	// we must have hit a batch limit and are already finalizing this batch
	if b.closing {
		l.mu.Unlock()
		return
	}

	l.batch = nil
	l.mu.Unlock()

	b.end(l)
}

// end calls fetch and closes the done channel to unblock all thunks
func (b *userLoaderBatch) end(l *UserLoader) {
	if l.hookBeforeFetch != nil {
		l.hookBeforeFetch(b.keys, "UserLoader")
	}
	b.data, b.errors = l.fetch(b.keys)
	if l.hookAfterFetch != nil {
		l.hookAfterFetch(b.keys, "UserLoader")
	}
	close(b.done)
}
