// Code generated by github.com/viocle/dataloaden, DO NOT EDIT.

package differentpkg

import (
	"sync"
	"time"

	"github.com/viocle/dataloaden/example"
)

// UserLoaderConfig captures the config to create a new UserLoader
type UserLoaderConfig struct {
	// Fetch is a method that provides the data for the loader
	Fetch func(keys []string) ([]*example.User, []error)

	// Wait is how long to wait before sending a batch
	Wait time.Duration

	// MaxBatch will limit the maximum number of keys to send in one batch, 0 = no limit
	MaxBatch int

	// ExpireAfter determines how long until cached items expire. Set to 0 to disable expiration
	ExpireAfter time.Duration
}

// UserLoaderCacheItem defines a cache item when using dataloader cache expiration where expireAfter > 0
type UserLoaderCacheItem struct {
	// Expires contains the time this CacheItem expires
	Expires time.Time

	// Value contains the cached *example.User
	Value *example.User
}

func (c *UserLoaderCacheItem) expired() bool {
	return c.Expires.Before(time.Now())
}

// NewUserLoader creates a new UserLoader given a fetch, wait, and maxBatch
func NewUserLoader(config UserLoaderConfig) *UserLoader {
	return &UserLoader{
		fetch:       config.Fetch,
		wait:        config.Wait,
		maxBatch:    config.MaxBatch,
		expireAfter: config.ExpireAfter,
	}
}

// UserLoader batches and caches requests
type UserLoader struct {
	// this method provides the data for the loader
	fetch func(keys []string) ([]*example.User, []error)

	// lazily created cache
	cacheExpire map[string]*UserLoaderCacheItem
	cache       map[string]*example.User

	// the current batch. keys will continue to be collected until timeout is hit,
	// then everything will be sent to the fetch method and out to the listeners
	batch *userLoaderBatch

	// how long to done before sending a batch
	wait time.Duration

	// this will limit the maximum number of keys to send in one batch, 0 = no limit
	maxBatch int

	// this will determine if cache expiration will be used
	expireAfter time.Duration

	// mutex to prevent races
	mu sync.Mutex
}

type userLoaderBatch struct {
	done    chan struct{}
	keys    []string
	data    []*example.User
	error   []error
	closing bool
}

// Load a User by key, batching and caching will be applied automatically
func (l *UserLoader) Load(key string) (*example.User, error) {
	return l.LoadThunk(key)()
}

// LoadThunk returns a function that when called will block waiting for a User.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *UserLoader) LoadThunk(key string) func() (*example.User, error) {
	l.mu.Lock()
	if l.expireAfter <= 0 {
		// not using cache expiration
		if it, ok := l.cache[key]; ok {
			l.mu.Unlock()
			return func() (*example.User, error) {
				return it, nil
			}
		}
	} else {
		// using cache expiration
		if it, ok := l.cacheExpire[key]; ok {
			l.mu.Unlock()
			if it != nil && !it.expired() {
				return func() (*example.User, error) {
					return it.Value, nil
				}
			}
			// cache item has expired, clear from cache and re-lock
			l.Clear(key)
			l.mu.Lock()
		}
	}
	if l.batch == nil {
		l.batch = &userLoaderBatch{done: make(chan struct{})}
	}
	batch := l.batch
	pos := batch.keyIndex(l, key)
	l.mu.Unlock()

	return func() (*example.User, error) {
		<-batch.done

		var data *example.User
		if pos < len(batch.data) {
			data = batch.data[pos]
		}

		var err error
		// its convenient to be able to return a single error for everything
		if len(batch.error) == 1 {
			err = batch.error[0]
		} else if batch.error != nil {
			err = batch.error[pos]
		}

		if err == nil {
			l.mu.Lock()
			l.unsafeSet(key, data)
			l.mu.Unlock()
		}

		return data, err
	}
}

// LoadAll fetches many keys at once. It will be broken into appropriate sized
// sub batches depending on how the loader is configured
func (l *UserLoader) LoadAll(keys []string) ([]*example.User, []error) {
	results := make([]func() (*example.User, error), len(keys))

	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}

	users := make([]*example.User, len(keys))
	errors := make([]error, len(keys))
	for i, thunk := range results {
		users[i], errors[i] = thunk()
	}
	return users, errors
}

// LoadAllThunk returns a function that when called will block waiting for a Users.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *UserLoader) LoadAllThunk(keys []string) func() ([]*example.User, []error) {
	results := make([]func() (*example.User, error), len(keys))
	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}
	return func() ([]*example.User, []error) {
		users := make([]*example.User, len(keys))
		errors := make([]error, len(keys))
		for i, thunk := range results {
			users[i], errors[i] = thunk()
		}
		return users, errors
	}
}

// unsafePrime will prime the cache with the given key and value if the key does not exist. This method is not thread safe.
func (l *UserLoader) unsafePrime(key string, value *example.User) bool {
	var found bool
	if l.expireAfter <= 0 {
		// not using cache expiration
		if _, found = l.cache[key]; !found {
			// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
			// and end up with the whole cache pointing to the same value.
			cpy := *value
			l.unsafeSet(key, &cpy)
		}
	} else {
		// using cache expiration
		if _, found = l.cacheExpire[key]; !found {
			// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
			// and end up with the whole cache pointing to the same value.
			cpy := *value
			l.unsafeSet(key, &cpy)
		}
	}
	return !found
}

// PrimeMany will prime the cache with the given keys and values. Value index is matched to key index.
func (l *UserLoader) PrimeMany(keys []string, values []*example.User) []bool {
	if len(keys) != len(values) {
		// keys and values must be the same length
		return make([]bool, len(keys))
	}
	ret := make([]bool, len(keys))
	l.mu.Lock()
	for i, key := range keys {
		ret[i] = l.unsafePrime(key, values[i])
	}
	l.mu.Unlock()
	return ret
}

// Prime the cache with the provided key and value. If the key already exists, no change is made
// and false is returned.
// (To forcefully prime the cache, clear the key first with loader.clear(key).prime(key, value).)
func (l *UserLoader) Prime(key string, value *example.User) bool {
	l.mu.Lock()
	found := l.unsafePrime(key, value)
	l.mu.Unlock()
	return found
}

// Clear the value at key from the cache, if it exists
func (l *UserLoader) Clear(key string) {
	if l.expireAfter <= 0 {
		// not using cache expiration
		l.mu.Lock()
		delete(l.cache, key)
		l.mu.Unlock()
	} else {
		// using cache expiration
		l.mu.Lock()
		delete(l.cacheExpire, key)
		l.mu.Unlock()
	}
}

// ClearAll clears all values from the cache
func (l *UserLoader) ClearAll() {
	if l.expireAfter <= 0 {
		// not using cache expiration
		l.mu.Lock()
		l.cache = make(map[string]*example.User, 1)
		l.mu.Unlock()
	} else {
		// using cache expiration
		l.mu.Lock()
		l.cacheExpire = make(map[string]*UserLoaderCacheItem, 1)
		l.mu.Unlock()
	}
}

// ClearExpired clears all expired values from the cache if cache expiration is being used
func (l *UserLoader) ClearExpired() {
	if l.expireAfter > 0 {
		// using cache expiration
		tNow := time.Now()
		l.mu.Lock()
		for cacheKey, cacheItem := range l.cacheExpire {
			if cacheItem != nil && !tNow.Before(cacheItem.Expires) {
				// value has expired
				delete(l.cacheExpire, cacheKey)
			}
		}
		l.mu.Unlock()
	}
}

func (l *UserLoader) unsafeSet(key string, value *example.User) {
	if l.expireAfter <= 0 {
		// not using cache expiration
		if l.cache == nil {
			l.cache = make(map[string]*example.User, 1)
		}
		l.cache[key] = value
	} else {
		// using cache expiration
		if l.cacheExpire == nil {
			l.cacheExpire = make(map[string]*UserLoaderCacheItem, 1)
		}
		l.cacheExpire[key] = &UserLoaderCacheItem{Expires: time.Now().Add(l.expireAfter), Value: value}
	}
}

// keyIndex will return the location of the key in the batch, if its not found
// it will add the key to the batch
func (b *userLoaderBatch) keyIndex(l *UserLoader, key string) int {
	for i, existingKey := range b.keys {
		if key == existingKey {
			return i
		}
	}

	pos := len(b.keys)
	b.keys = append(b.keys, key)
	if pos == 0 {
		go b.startTimer(l)
	}

	if l.maxBatch != 0 && pos >= l.maxBatch-1 {
		if !b.closing {
			b.closing = true
			l.batch = nil
			go b.end(l)
		}
	}

	return pos
}

func (b *userLoaderBatch) startTimer(l *UserLoader) {
	time.Sleep(l.wait)
	l.mu.Lock()

	// we must have hit a batch limit and are already finalizing this batch
	if b.closing {
		l.mu.Unlock()
		return
	}

	l.batch = nil
	l.mu.Unlock()

	b.end(l)
}

func (b *userLoaderBatch) end(l *UserLoader) {
	b.data, b.error = l.fetch(b.keys)
	close(b.done)
}
